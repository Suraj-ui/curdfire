{"version":3,"sources":["firebase.js","services/Service.js","component/AddTutorial.js","component/Tutorial.js","component/TutorialsList.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","ref","data","push","key","child","update","remove","AddTutorial","initialTutorialState","title","description","published","useState","tutorial","setTutorial","submitted","setSubmitted","handleInputChange","event","target","name","value","className","onClick","htmlFor","type","id","required","onChange","TutorialDataService","then","catch","e","console","log","Tutorial","props","currentTutorial","setCurrentTutorial","message","setMessage","updatePublished","status","refreshList","TutorialsList","currentIndex","setCurrentIndex","useList","tutorials","loading","error","map","index","val","setActiveTutorial","App","href","to","exact","path","component","TList","Add","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.59bc2a8f.chunk.js","sourcesContent":["import * as firebase from \"firebase\";\r\nimport \"../node_modules/firebase/firebase\";\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyC-43Fy1Ohl2irSs0GBypwM5VzEHaU799c\",\r\n    authDomain: \"democurd-4fc2b.firebaseapp.com\",\r\n    databaseURL: \"https://democurd-4fc2b.firebaseio.com\",\r\n    projectId: \"democurd-4fc2b\",\r\n    storageBucket: \"democurd-4fc2b.appspot.com\",\r\n    messagingSenderId: \"665999741335\",\r\n    appId: \"1:665999741335:web:2832cd63a57044d6af34d2\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export default firebase.database();","import firebase from \"../firebase\";\r\n\r\nconst db = firebase.ref(\"/tutorials\");\r\n\r\nconst getAll = () => {\r\n  return db;\r\n};\r\n\r\nconst create = (data) => {\r\n  return db.push(data);\r\n};\r\n\r\nconst update = (key, data) => {\r\n  return db.child(key).update(data);\r\n};\r\n\r\nconst remove = (key) => {\r\n  return db.child(key).remove();\r\n};\r\n\r\nconst removeAll = () => {\r\n  return db.remove();\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  update,\r\n  remove,\r\n  removeAll,\r\n};","import React, { useState } from \"react\";\r\nimport TutorialDataService from \"../services/Service\";\r\n\r\nconst AddTutorial = () => {\r\n  const initialTutorialState = {\r\n    title: \"\",\r\n    description: \"\",\r\n    published: false\r\n  };\r\n  const [tutorial, setTutorial] = useState(initialTutorialState);\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value } = event.target;\r\n    setTutorial({ ...tutorial, [name]: value });\r\n  };\r\n\r\n  const saveTutorial = () => {\r\n    var data = {\r\n      title: tutorial.title,\r\n      description: tutorial.description,\r\n      published: false\r\n    };\r\n\r\n    TutorialDataService.create(data)\r\n      .then(() => {\r\n        setSubmitted(true);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const newTutorial = () => {\r\n    setTutorial(initialTutorialState);\r\n    setSubmitted(false);\r\n  };\r\n\r\n  return (\r\n        <div className=\"submit-form\">\r\n          {submitted ? (\r\n            <div>\r\n              <h4>You submitted successfully!</h4>\r\n              <button className=\"btn btn-success\" onClick={newTutorial}>\r\n                Add\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"title\">Title</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"title\"\r\n                  required\r\n                  value={tutorial.title}\r\n                  onChange={handleInputChange}\r\n                  name=\"title\"\r\n                />\r\n              </div>\r\n    \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"description\">Description</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"description\"\r\n                  required\r\n                  value={tutorial.description}\r\n                  onChange={handleInputChange}\r\n                  name=\"description\"\r\n                />\r\n              </div>\r\n    \r\n              <button onClick={saveTutorial} className=\"btn btn-success\">\r\n                Submit\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      \r\n  );\r\n};\r\n\r\nexport default AddTutorial;","import React, { useState } from \"react\";\r\nimport TutorialDataService from \"../services/Service\";\r\n\r\nconst Tutorial = (props) => {\r\n  const initialTutorialState = {\r\n    key: null,\r\n    title: \"\",\r\n    description: \"\",\r\n    published: false,\r\n  };\r\n  const [currentTutorial, setCurrentTutorial] = useState(initialTutorialState);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const { tutorial } = props;\r\n  if (currentTutorial.key !== tutorial.key) {\r\n    setCurrentTutorial(tutorial);\r\n    setMessage(\"\");\r\n  }\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setCurrentTutorial({ ...currentTutorial, [name]: value });\r\n  };\r\n\r\n  const updatePublished = (status) => {\r\n    TutorialDataService.update(currentTutorial.key, { published: status })\r\n      .then(() => {\r\n        setCurrentTutorial({ ...currentTutorial, published: status });\r\n        setMessage(\"The status was updated successfully!\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const updateTutorial = () => {\r\n    const data = {\r\n      title: currentTutorial.title,\r\n      description: currentTutorial.description,\r\n    };\r\n\r\n    TutorialDataService.update(currentTutorial.key, data)\r\n      .then(() => {\r\n        setMessage(\"The tutorial was updated successfully!\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const deleteTutorial = () => {\r\n    TutorialDataService.remove(currentTutorial.key)\r\n      .then(() => {\r\n        props.refreshList();\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {currentTutorial ? (\r\n        <div className=\"edit-form\">\r\n          <h4>Tutorial</h4>\r\n          <form>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"title\">Title</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"title\"\r\n                name=\"title\"\r\n                value={currentTutorial.title}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"description\">Description</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"description\"\r\n                name=\"description\"\r\n                value={currentTutorial.description}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label>\r\n                <strong>Status:</strong>\r\n              </label>\r\n              {currentTutorial.published ? \"Published\" : \"Pending\"}\r\n            </div>\r\n          </form>\r\n\r\n          {currentTutorial.published ? (\r\n            <button\r\n              className=\"badge badge-primary mr-2\"\r\n              onClick={() => updatePublished(false)}\r\n            >\r\n              UnPublish\r\n            </button>\r\n          ) : (\r\n            <button\r\n              className=\"badge badge-primary mr-2\"\r\n              onClick={() => updatePublished(true)}\r\n            >\r\n              Publish\r\n            </button>\r\n          )}\r\n\r\n          <button className=\"badge badge-danger mr-2\" onClick={deleteTutorial}>\r\n            Delete\r\n          </button>\r\n\r\n          <button\r\n            type=\"submit\"\r\n            className=\"badge badge-success\"\r\n            onClick={updateTutorial}\r\n          >\r\n            Update\r\n          </button>\r\n          <p>{message}</p>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <br />\r\n          <p>Please click on a Tutorial...</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Tutorial;","import React, { useState } from \"react\";\r\nimport { useList } from 'react-firebase-hooks/database';\r\nimport TutorialDataService from \"../services/Service\";\r\nimport Tutorial from \"./Tutorial\";\r\n\r\nconst TutorialsList = () => {\r\n  const [currentTutorial, setCurrentTutorial] = useState(null);\r\n  const [currentIndex, setCurrentIndex] = useState(-1);\r\n\r\n  /* use react-firebase-hooks */\r\n  const [tutorials, loading, error] = useList(TutorialDataService.getAll());\r\n\r\n  const refreshList = () => {\r\n    setCurrentTutorial(null);\r\n    setCurrentIndex(-1);\r\n  };\r\n\r\n  const setActiveTutorial = (tutorial, index) => {\r\n    const { title, description, published } = tutorial.val();\r\n\r\n    setCurrentTutorial({\r\n      key: tutorial.key,\r\n      title,\r\n      description,\r\n      published,\r\n    });\r\n\r\n    setCurrentIndex(index);\r\n  };\r\n\r\n  const removeAllTutorials = () => {\r\n    TutorialDataService.removeAll()\r\n      .then(() => {\r\n        refreshList();\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"list row\">\r\n      <div className=\"col-md-6\">\r\n        <h4>Tutorials List</h4>\r\n\r\n        {error && <strong>Error: {error}</strong>}\r\n        {loading && <span>Loading...</span>}\r\n        <ul className=\"list-group\">\r\n          {!loading &&\r\n            tutorials &&\r\n            tutorials.map((tutorial, index) => (\r\n              <li\r\n                className={\"list-group-item \" + (index === currentIndex ? \"active\" : \"\")}\r\n                onClick={() => setActiveTutorial(tutorial, index)}\r\n                key={index}\r\n              >\r\n                {tutorial.val().title}\r\n              </li>\r\n            ))}\r\n        </ul>\r\n\r\n        <button\r\n          className=\"m-3 btn btn-sm btn-danger\"\r\n          onClick={removeAllTutorials}\r\n        >\r\n          Remove All\r\n        </button>\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        {currentTutorial ? (\r\n          <Tutorial tutorial={currentTutorial} refreshList={refreshList} />\r\n        ) : (\r\n          <div>\r\n            <br />\r\n            <p>Please click on a Tutorial...</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TutorialsList;","import React from 'react';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { NavLink, Route, Switch } from 'react-router-dom';\nimport Add from './component/AddTutorial';\nimport TList from './component/TutorialsList';\n\nconst App = () => {\n  return (\n  <>\n    <div>\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n        <a href=\"/tutorials\" className=\"navbar-brand\">\n         SimpleRecord\n        </a>\n        <div className=\"navbar-nav mr-auto\">\n          <li className=\"nav-item\">\n            <NavLink to={\"/tutorials\"} className=\"nav-link\">\n              List\n            </NavLink>\n          </li>\n          <li className=\"nav-item\">\n            <NavLink to={\"/add\"} className=\"nav-link\">\n              Add\n            </NavLink>\n          </li>\n        </div>\n      </nav>\n      <div className=\"container mt-3\">\n        <h2>Do it here.</h2>\n        <Switch>\n          <Route exact path={[\"/\", \"/tutorials\"]} component={TList} />\n          <Route exact path=\"/add\" component={Add} />\n        </Switch>\n      </div>\n    </div>\n  </>\n    \n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}